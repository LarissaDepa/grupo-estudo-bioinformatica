# -*- coding: utf-8 -*-
"""Mendel first law

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awgkrpRHArRLDYR9Yr3csU1J3N6rMsOo
"""

import random

def brute_mendel(k,m,n):
    povo = ["AA"]*k +["Aa"]*m +["aa"]*n
    l = len(povo) - 1
    nA = 0 # numero de vezes que caiu um A
    nx = 100000 # numero de vezes que vai rodar
    

    for x in range(nx):
        pos = random.randint(0,l)
        pos2 = random.randint(0,l)
        while pos2 == pos:
            pos2 =random.randint(0,l)
        herancapai = random.choice(povo[pos])
        herancamae = random.choice(povo[pos2])
        if "A" in herancamae+herancapai:
            nA+=1
    
    return nA/nx*1.0

print(brute_mendel(2,2,2))

###-----versão séria-----###

def mendel(k,m,n):
  """
  Probabilidade de ter um A
      k  m  n
    |AA|Aa|aa
  AA| 1| 1| 1
  Aa| 1|.75|.5
  aa| 1|.5| 0
 
  Probabilidade de ser recessivo -> usei esse pra ficar menor o calculo
    |AA|Aa|aa
  AA| 0| 0| 0
  Aa| 0|.25|.5
  aa| 0|.5| 1
 
 Probabilidade de cair cada combinação

  total = k+m+n
  m (Aa) X m (Aa) = m/total * (m-1)/(total-1)
  m (Aa) X n (aa) = m/total * n/(total-1)  *** esse acontece 2x invertendo a ordem
  n (Aa) X n (Aa) = n/total * (n-1)/(total-1)

  Logo vamos calcular com
  1 - ((0.25*m/total*(m-1)/(total-1)) + 2*(0.5*m/total * n/(total-1))+ (n/total * (n-1)/(total-1)))
  """
  total=k+m+n
  formula = (0.25*m/total*(m-1)/(total-1)) + 2*(0.5*m/total*n/(total-1))+ (n/total * (n-1)/(total-1))
  return 1- formula

print(mendel(2,2,2))
